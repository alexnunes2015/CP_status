{
	"info": {
		"_postman_id": "d0f1e0d1-227c-4cc2-a465-d3090af5e9f5",
		"name": "CP",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1726030"
	},
	"item": [
		{
			"name": "getStation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.response).to.be.an('array');",
							"    ",
							"    responseData.response.forEach(function(item){",
							"        pm.expect(item).to.have.property('Distancia');",
							"        pm.expect(item).to.have.property('NodeID');",
							"        pm.expect(item).to.have.property('Nome');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Distancia is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    ",
							"    responseData.response.forEach(function(item) {",
							"        pm.expect(item.Distancia).to.be.a('number').and.to.be.at.least(0, \"Distancia should be a non-negative integer\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"NodeID is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.response).to.exist.and.to.be.an('array');",
							"    ",
							"    responseData.response.forEach(function(item) {",
							"        pm.expect(item.NodeID).to.exist.and.to.be.a('number').and.to.be.at.least(0);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Nome is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.response).to.exist.and.to.be.an('array');",
							"  ",
							"  responseData.response.forEach(function (item) {",
							"    pm.expect(item.Nome).to.exist.and.to.be.a('string').and.to.not.be.empty;",
							"  });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://127.0.0.1/getStation.php?estacao=",
					"protocol": "https",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"path": [
						"getStation.php"
					],
					"query": [
						{
							"key": "estacao",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getTimeTable",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response array is present and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.response).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1, \"Response array should contain at least one element\");",
							"});",
							"",
							"",
							"pm.test(\"NodeID is a non-zero integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.response).to.be.an('array');",
							"    responseData.response.forEach(function(item) {",
							"        pm.expect(item.NodeID).to.be.a('number').and.to.not.equal(0);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"NodesComboioTabelsPartidasChegadas array is present and not empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.response).to.exist.and.to.be.an('array');",
							"    pm.expect(responseData.response[0].NodesComboioTabelsPartidasChegadas).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://127.0.0.1/getTimeTable.php?stationID=9438000&horaInicial=14:28&horaFinal=23:59&servico=INTERNACIONAL,ALFA,IC,IR,REGIONAL,URB|SUBUR,ESPECIAL&data=2023-08-11",
					"protocol": "https",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"path": [
						"getTimeTable.php"
					],
					"query": [
						{
							"key": "stationID",
							"value": "9438000"
						},
						{
							"key": "horaInicial",
							"value": "14:28"
						},
						{
							"key": "horaFinal",
							"value": "23:59"
						},
						{
							"key": "servico",
							"value": "INTERNACIONAL,ALFA,IC,IR,REGIONAL,URB|SUBUR,ESPECIAL"
						},
						{
							"key": "data",
							"value": "2023-08-11"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "getTrain",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"NodesPassagemComboio array is present and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.response.NodesPassagemComboio).to.exist.and.to.be.an('array').with.lengthOf.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"NodeID is a non-negative integer in each element of NodesPassagemCombo\", function () {",
							"  const responseData = pm.response.json();",
							"  const nodesPassagemCombo = responseData.response.NodesPassagemCombo;",
							"",
							"  pm.expect(nodesPassagemCombo).to.be.an('array');",
							"",
							"  nodesPassagemCombo.forEach(function (node) {",
							"    pm.expect(node.NodeID).to.be.a('number').and.to.be.at.least(0);",
							"  });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://127.0.0.1/getTrain.php?estacao=AVEIRO&trainNumber=15635&data=2023-08-11",
					"protocol": "https",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"path": [
						"getTrain.php"
					],
					"query": [
						{
							"key": "estacao",
							"value": "AVEIRO"
						},
						{
							"key": "trainNumber",
							"value": "15635"
						},
						{
							"key": "data",
							"value": "2023-08-11"
						}
					]
				}
			},
			"response": []
		}
	]
}